parameters:
  - name: Environment
    type: string
  - name: DeploymentResourceGroupName
    type: string
  - name: DeploymentStorageAccountName
    type: string
  - name: TerraformDirectory
    type: string
  - name: TerraformArtifact
    type: string
  - name: PlanName
    type: string
  - name: AzDOEnvironment
    type: string
  - name: TerraformVariableMappings
    type: object
  - name: TerraformOutputVariables
    type: object

jobs:
  - deployment: planInfrastructure
    displayName: "Plan Infrastructure"
    workspace:
      clean: all
    environment: "${{ parameters.AzDOEnvironment }}"
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - checkout: UKHOTemplates
              persistCredentials: true
              path: devops-pipelinetemplates

            - pwsh: |
                Write-Host "Current Directory: $( Get-Location )"
                Write-Host "Directory Content:"
                Get-ChildItem | ForEach-Object { Write-Host $_ }
                
                $variables = @{
                  'Build.SourceBranch' = "$(Build.SourceBranch)"
                  'Build.SourceBranchName' = "$(Build.SourceBranchName)"
                  'Build.SourceVersion' = "$(Build.SourceVersion)"
                  'Build.BuildId' = "$(Build.BuildId)"
                  'Build.BuildNumber' = "$(Build.BuildNumber)"
                  'Build.DefinitionName' = "$(Build.DefinitionName)"
                  'Build.Repository.Name' = "$(Build.Repository.Name)"
                  'Build.Repository.Uri' = "$(Build.Repository.Uri)"
                  'Build.Repository.LocalPath' = "$(Build.Repository.LocalPath)"
                  'Build.Reason' = "$(Build.Reason)"
                  'System.ArtifactsDirectory' = "$(System.ArtifactsDirectory)"
                  'System.DefaultWorkingDirectory' = "$(System.DefaultWorkingDirectory)"
                  'System.StageDisplayName' = "$(System.StageDisplayName)"
                  'System.JobDisplayName' = "$(System.JobDisplayName)"
                  'Agent.Name' = "$(Agent.Name)"
                  'Agent.OS' = "$(Agent.OS)"
                  'Agent.HomeDirectory' = "$(Agent.HomeDirectory)"
                  'Agent.WorkFolder' = "$(Agent.WorkFolder)"
                  'Agent.TempDirectory' = "$(Agent.TempDirectory)"
                  'Agent.BuildDirectory' = "$(Agent.BuildDirectory)"
                  'Agent.JobStatus' = "$(Agent.JobStatus)"
                  'Agent.JobName' = "$(Agent.JobName)"
                }
                  
                foreach ($variable in $variables.GetEnumerator()) {
                  Write-Host "$($variable.Key): $($variable.Value)"
                }

            - download: current
              artifact: "${{ parameters.TerraformArtifact }}"
              retryCountOnTaskFailure: '2'
              displayName: 'Download terraform artifact'

            - task: PowerShell@2
              name: plan
              displayName: "terraform ${{ lower(parameters.Environment) }}deploy"
              inputs:
                targetType: filePath
                filePath: "$(Pipeline.Workspace)/devops-pipelinetemplates/gated-infrastructure-deploy/terraform-plan.ps1"
                arguments: >
                  -deploymentResourceGroupName ${{ parameters.DeploymentResourceGroupName }}
                  -deploymentStorageAccountName ${{ parameters.DeploymentStorageAccountName }}
                  -terraformStorageKeyName ${{ parameters.PlanName }}
                  -terraformFilesDirectory ${{ parameters.TerraformDirectory }}
                  -workSpace ${{ lower(parameters.Environment) }}
                  -terraformPlanName ${{ parameters.PlanName }}
              env:
                ${{ each TerraformVariableMappings in parameters.TerraformVariableMappings }}:
                  ${{ TerraformVariableMappings.Key }}: ${{ TerraformVariableMappings.Value }}

  - job: manual_verification
    dependsOn: planInfrastructure
    pool: server
    condition: eq(dependencies.planInfrastructure.outputs['planInfrastructure.plan.needsVerification'], 'true')
    displayName: "Service Manual Verification"
    steps:
      - task: Delay@1
        displayName: "👇🔁 Refresh browser if button to verify Terraform Plan does not appear in the task below"

      - task: ManualValidation@0
        displayName: "Accept or Reject Plan?"
        timeoutInMinutes: 60

  - deployment: deployInfrastructure
    displayName: "Deploy Infrastructure"
    dependsOn:
      - manual_verification
      - planInfrastructure
    condition: or(succeeded('manual_verification'), and(succeeded('planInfrastructure'), ne(dependencies.planInfrastructure.outputs['planInfrastructure.plan.needsVerification'], 'true')))
    environment: "${{ parameters.AzDOEnvironment }}"
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - checkout: UKHOTemplates
              persistCredentials: true
              path: devops-pipelinetemplates

            - download: current
              artifact: "${{ parameters.TerraformArtifact }}"
              retryCountOnTaskFailure: '2'
              displayName: 'Download terraform artifact'

            - task: PowerShell@2
              displayName: "terraform ${{ lower(parameters.Environment) }}deploy"
              name: deployment
              inputs:
                targetType: filePath
                filePath: "$(Pipeline.Workspace)/devops-pipelinetemplates/gated-infrastructure-deploy/terraform-apply.ps1"
                arguments: >
                  -deploymentResourceGroupName ${{ parameters.DeploymentResourceGroupName }}
                  -deploymentStorageAccountName ${{ parameters.DeploymentStorageAccountName }}
                  -terraformStorageKeyName ${{ parameters.PlanName}}
                  -terraformFilesDirectory ${{ parameters.TerraformDirectory }}
                  -workSpace ${{ lower(parameters.Environment) }}
                  -terraformOutputVariables ${{ convertToJson(parameters.TerraformOutputVariables) }}
              env:
                ${{ each TerraformVariableMappings in parameters.TerraformVariableMappings }}:
                  ${{ TerraformVariableMappings.Key }}: ${{ TerraformVariableMappings.Value }}